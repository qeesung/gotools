// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package chunks

// SplitString splits a slice into parts of a given length, with a remainder if necessary.
func SplitString(in []string, partLen int) [][]string {
	inLen := len(in)
	if inLen == 0 {
		return nil
	}
	var out [][]string
	for a := 0; a < inLen; a += partLen {
		z := a + partLen
		if z > inLen {
			z = inLen
		}
		out = append(out, in[a:z])
	}
	return out
}

// SplitInt splits a slice into parts of a given length, with a remainder if necessary.
func SplitInt(in []int, partLen int) [][]int {
	inLen := len(in)
	if inLen == 0 {
		return nil
	}
	var out [][]int
	for a := 0; a < inLen; a += partLen {
		z := a + partLen
		if z > inLen {
			z = inLen
		}
		out = append(out, in[a:z])
	}
	return out
}

// SplitInt64 splits a slice into parts of a given length, with a remainder if necessary.
func SplitInt64(in []int64, partLen int) [][]int64 {
	inLen := len(in)
	if inLen == 0 {
		return nil
	}
	var out [][]int64
	for a := 0; a < inLen; a += partLen {
		z := a + partLen
		if z > inLen {
			z = inLen
		}
		out = append(out, in[a:z])
	}
	return out
}

// SplitUint64 splits a slice into parts of a given length, with a remainder if necessary.
func SplitUint64(in []uint64, partLen int) [][]uint64 {
	inLen := len(in)
	if inLen == 0 {
		return nil
	}
	var out [][]uint64
	for a := 0; a < inLen; a += partLen {
		z := a + partLen
		if z > inLen {
			z = inLen
		}
		out = append(out, in[a:z])
	}
	return out
}
