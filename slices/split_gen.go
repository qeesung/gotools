// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package slices

// SplitString splits a slice into parts of a given length, with a remainder if necessary.
func SplitString(src []string, partLen int) [][]string {
	srcLen := len(src)
	if srcLen == 0 {
		return nil
	}
	var dst [][]string
	for a := 0; a < srcLen; a += partLen {
		z := a + partLen
		if z > srcLen {
			z = srcLen
		}
		dst = append(dst, src[a:z])
	}
	return dst
}

// SplitInt splits a slice into parts of a given length, with a remainder if necessary.
func SplitInt(src []int, partLen int) [][]int {
	srcLen := len(src)
	if srcLen == 0 {
		return nil
	}
	var dst [][]int
	for a := 0; a < srcLen; a += partLen {
		z := a + partLen
		if z > srcLen {
			z = srcLen
		}
		dst = append(dst, src[a:z])
	}
	return dst
}

// SplitInt64 splits a slice into parts of a given length, with a remainder if necessary.
func SplitInt64(src []int64, partLen int) [][]int64 {
	srcLen := len(src)
	if srcLen == 0 {
		return nil
	}
	var dst [][]int64
	for a := 0; a < srcLen; a += partLen {
		z := a + partLen
		if z > srcLen {
			z = srcLen
		}
		dst = append(dst, src[a:z])
	}
	return dst
}

// SplitUint64 splits a slice into parts of a given length, with a remainder if necessary.
func SplitUint64(src []uint64, partLen int) [][]uint64 {
	srcLen := len(src)
	if srcLen == 0 {
		return nil
	}
	var dst [][]uint64
	for a := 0; a < srcLen; a += partLen {
		z := a + partLen
		if z > srcLen {
			z = srcLen
		}
		dst = append(dst, src[a:z])
	}
	return dst
}
