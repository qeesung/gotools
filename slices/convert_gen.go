// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package slices

// ConvertStringToInterface generics helper.
func ConvertStringToInterface(in []string) []interface{} {
	out := make([]interface{}, len(in))
	for i, value := range in {
		out[i] = value
	}
	return out
}

// AppendStringToInterface generics helper.
func AppendStringToInterface(out []interface{}, in ...string) []interface{} {
	for _, value := range in {
		out = append(out, value)
	}
	return out
}

// ConvertIntToInterface generics helper.
func ConvertIntToInterface(in []int) []interface{} {
	out := make([]interface{}, len(in))
	for i, value := range in {
		out[i] = value
	}
	return out
}

// AppendIntToInterface generics helper.
func AppendIntToInterface(out []interface{}, in ...int) []interface{} {
	for _, value := range in {
		out = append(out, value)
	}
	return out
}

// ConvertInt64ToInterface generics helper.
func ConvertInt64ToInterface(in []int64) []interface{} {
	out := make([]interface{}, len(in))
	for i, value := range in {
		out[i] = value
	}
	return out
}

// AppendInt64ToInterface generics helper.
func AppendInt64ToInterface(out []interface{}, in ...int64) []interface{} {
	for _, value := range in {
		out = append(out, value)
	}
	return out
}

// ConvertUint64ToInterface generics helper.
func ConvertUint64ToInterface(in []uint64) []interface{} {
	out := make([]interface{}, len(in))
	for i, value := range in {
		out[i] = value
	}
	return out
}

// AppendUint64ToInterface generics helper.
func AppendUint64ToInterface(out []interface{}, in ...uint64) []interface{} {
	for _, value := range in {
		out = append(out, value)
	}
	return out
}
